// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: feed_follows.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createFeedFollow = `-- name: CreateFeedFollow :one
INSERT INTO feed_follows (id, created_at, updated_at, user_id, feed_id)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
)
RETURNING 
    id, created_at, updated_at, user_id, feed_id,
    (SELECT name FROM users WHERE users.id = $4) AS user_name,
    (SELECT name FROM feeds WHERE feeds.id = $5) AS feed_name
`

type CreateFeedFollowParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	FeedID    uuid.UUID
}

type CreateFeedFollowRow struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	FeedID    uuid.UUID
	UserName  string
	FeedName  string
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) (CreateFeedFollowRow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollow,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.FeedID,
	)
	var i CreateFeedFollowRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FeedID,
		&i.UserName,
		&i.FeedName,
	)
	return i, err
}

const deleteUsersFeedFollowsByUrl = `-- name: DeleteUsersFeedFollowsByUrl :many
DELETE FROM feed_follows
WHERE 
    user_id = (SELECT id FROM users WHERE users.name = $1) 
        AND 
    feed_id = (SELECT id FROM feeds WHERE url = $2)
RETURNING id, created_at, updated_at, user_id, feed_id
`

type DeleteUsersFeedFollowsByUrlParams struct {
	Name string
	Url  string
}

func (q *Queries) DeleteUsersFeedFollowsByUrl(ctx context.Context, arg DeleteUsersFeedFollowsByUrlParams) ([]FeedFollow, error) {
	rows, err := q.db.QueryContext(ctx, deleteUsersFeedFollowsByUrl, arg.Name, arg.Url)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FeedFollow
	for rows.Next() {
		var i FeedFollow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.FeedID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersFeedFollows = `-- name: GetUsersFeedFollows :many
SELECT users.name AS user_name, feeds.name AS feed_name, feeds.url AS feed_url FROM feed_follows
INNER JOIN users ON feed_follows.user_id = users.id
INNER JOIN feeds ON feed_follows.feed_id = feeds.id
WHERE users.name = $1
`

type GetUsersFeedFollowsRow struct {
	UserName string
	FeedName string
	FeedUrl  string
}

func (q *Queries) GetUsersFeedFollows(ctx context.Context, name string) ([]GetUsersFeedFollowsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUsersFeedFollows, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersFeedFollowsRow
	for rows.Next() {
		var i GetUsersFeedFollowsRow
		if err := rows.Scan(&i.UserName, &i.FeedName, &i.FeedUrl); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
